use com.basiscomponents.bc.SqlTableBC
use com.basiscomponents.db.DataRow
use com.basiscomponents.db.ResultSet

use java.util.HashMap
use java.util.LinkedHashSet
use java.sql.Connection
use java.sql.PreparedStatement


class public DepartmentsBC

    field private SqlTableBC jbc!


    rem /**
    rem  * Default constructor.
    rem  * A business component class for employees.
    rem  * It can read, write and delete employees.
    rem  * The default constructor initializes following scopes:
    rem  * A (address), B (basic) and * (default - all fields)
    rem  */
    method public DepartmentsBC()

        #jbc!=new SqlTableBC("jdbc:basis:localhost?database=ACME&user=guest&password=")
        #jbc!.setRetrieveSql("SELECT DISTINCT D AS DEPT FROM (SELECT TRIM(STR(' '+DEPT+' ')) AS D FROM EMPLOYEE) ")
        #init()

    methodend


    rem /**
    rem  * A business component class for employees.
    rem  * Constructor with an already opened connection and a custom SELECT statement which joined tables.
    rem  * It can read, write and delete employees.
    rem  * This constructor initializes following scopes:
    rem  * A (address), B (basic) and * (default - all fields)
    rem  * @param  conn! A java.sql.Connection to a database.
    rem  */
    method public DepartmentsBC(Connection conn!)

        #jbc!=new SqlTableBC(conn!)
        #init()

    methodend


    method private void init()
       
        #jbc!.setTable("EMPLOYEE")

        rem Define scopes
        declare java.util.HashMap scopes!
        scopes! = new HashMap()

        rem Scope A - all normal fields 
        declare BBjVector vec!
        vec! = new BBjVector()
        vec!.addItem("DEPT")
        scopes!.put("A",vec!)


        #jbc!.setScopeDef(scopes!)

    methodend


    rem /**
    rem  * Returns an empty DataRow including all field attributes (like field name, editable, label etc.)
    rem  * @return the empty DataRow with the field attributes
    rem  */
    method public DataRow getAttributesRecord()

        declare auto DataRow ar!

        ar! = #jbc!.getAttributesRecord()
        
            rem add / modify ar! to comply with special need

        methodret ar! 

    methodend


    rem /**
    rem  * Returns a new (predifined) DataRow including all field attributes (like field name, editable, label etc.)
    rem  * @param  DataRow conditions!  a DataRow with predifined fields
    rem  * @return a new predifined DataRow with the field attributes
    rem  */
    method public DataRow getNewObjectTemplate(DataRow conditions!)

        declare auto DataRow ot!
         
        ot! = #jbc!.getNewObjectTemplate(conditions!)
        
            rem set field values with defaults or even under the circumstances of conditions!, 
            rem e.g. if conditions! contains an empoyee number, you may set the correct payment 
            rem terms for the employee already here

        methodret ot! 

    methodend


    rem /**
    rem  * Set a filter to filter the search result.
    rem  * The filter is used in the retrieve method.
    rem  * If no filter is set, the retrieve method will return all employees.
    rem  * @see    #retrieve()
    rem  * @param  DataRow filter!  a DataRow object including field names and values to filter for.
    rem  *                          Filters are AND combined.
    rem  */
    method public void setFilter(DataRow filter!)

        #jbc!.setFilter(filter!)

    methodend


    rem /**
    rem  * Retrieves a ResultSet with employee DataRow's.
    rem  * If a filter is set, this will be applied to filter the result.
    rem  * If a scope and/or a field selecetion are set, they will be used to retrieve the desired fields.
    rem  * @return ResultSet  a ResultSet with employee DataRows (may be empty).
    rem  */
    method public ResultSet retrieve()

        methodret #jbc!.retrieve()

    methodend


    rem /**
    rem  * Retrieves a ResultSet with a subset of employee DataRow's.
    rem  * If a filter is set, this will be applied to filter the result.
    rem  * If a scope and/or a field selecetion are set, they will be used to retrieve the desired fields.
    rem  * @param  BBjInt    first%  the index of the first element in the subset (0 based)
    rem  * @param  BBjInt    last%   the index of the last element in the subset.
    rem  * @return ResultSet         a ResultSet with employee DataRows (may be empty).
    rem  */
    method public ResultSet retrieve(BBjInt first%, BBjInt last%)

        methodret #jbc!.retrieve(first%,last%)

    methodend


    rem /**
    rem  * Set a field selection to retrieve a custom set of fields.
    rem  * The default scope will be used if no field selection is set.
    rem  * @param  BBjVector fieldSelection!  a BBjVector containig the field names for retrieving.
    rem  */
    method public void setFieldSelection(BBjVector fieldSelection!)

        #jbc!.setFieldSelection(fieldSelection!)

    methodend


    rem /**
    rem  * Set a field selection to retrieve a custom set of fields.
    rem  * @param  DataRow fieldSelection!  a DataRow containig the field names for retrieving.
    rem  */
    method public void setFieldSelection(DataRow fieldSelection!)

        #jbc!.setFieldSelection(fieldSelection!)

    methodend


    rem /**
    rem  * Set a field selection scope (f.g. A, B, C, ...).
    rem  * One of the scopes from the scope definition.
    rem  * @param  BBjString scope$  the scope to set.
    rem  */
    method public void setScope(BBjString scope$)

        #jbc!.setScope(scope$)

    methodend


    rem /**
    rem  * Validates an empoyee DataRow object before it can be written.
    rem  * This method is internally used by the write method.
    rem  * But it can also be called from the frontend to check for required or missing data.
    rem  * @param  DataRow dr!  an empoyee DataRow that will be validated
    rem  * @return BBjVector    List with validation error messages (empty list means no validation errors).
    rem  */
    method public BBjVector validateWrite(DataRow dr!)

        declare BBjVector vecErrors!
        vecErrors! = new BBjVector()

        if dr! = null() then
            vecErrors!.addItem("Missing data to write!")
            methodret vecErrors!
        endif

        rem Check required fields
        if !dr!.contains("EMPL_ID") or dr!.getFieldAsString("EMPL_ID").trim() = "" then
            vecErrors!.addItem("Missing field: EMPL_ID")
        else
            if dr!.getFieldAsString("EMPL_ID").length() <> 6 then
                vecErrors!.addItem("EMPL_ID value incorrect length!")
            endif
        endif

        if !dr!.contains("NAME_LAST") or dr!.getFieldAsString("NAME_LAST").trim() = "" then
            vecErrors!.addItem("Missing field: NAME_LAST")
        else
            if dr!.getFieldAsString("NAME_LAST").length() > 30 then
                vecErrors!.addItem("NAME_LAST too long!")
            endif
        endif

        rem Place other constraints here...

        methodret vecErrors!

    methodend


    rem /**
    rem  * Write/persist an empoyee.
    rem  * @see    #validateWrite(DataRow dr!)
    rem  * @param  DataRow dr!  an empoyee DataRow to be persist.
    rem  * @return DataRow      the employee DataRow (may contain auto generated values/ID's)
    rem  */
    method public DataRow write(DataRow dr!)

        vecErrors! = #validateWrite(dr!)
        if vecErrors!.size() then
            it! = vecErrors!.iterator()
            while it!.hasNext()
                errormsg$ = errormsg$ + it!.next() + $0a$
            wend
            errormsg$ = errormsg$(1,len(errormsg$)-1)
            throw errormsg$,999
        endif

        methodret #jbc!.write(dr!)

    methodend


    rem /**
    rem  * Validates an empoyee DataRow object before it can be removed.
    rem  * This method is internally used by the remove method.
    rem  * But it can also be called from the frontend to check for dependencies before it can be removed.
    rem  * @param  DataRow dr!  an empoyee DataRow that should be removed
    rem  * @return BBjVector    List with validation error messages (empty list means no validation errors).
    rem  */
    method public BBjVector validateRemove(DataRow dr!)

        declare BBjVector vecErrors!
        vecErrors! = new BBjVector()

        if dr! = null() then
            vecErrors!.addItem("Missing data for delete!")
            methodret vecErrors!
        endif

        rem Check required fields
        if !dr!.contains("EMPL_ID") or dr!.getFieldAsString("EMPL_ID").trim() = "" then
            vecErrors!.addItem("Missing primary key field: EMPL_ID")
        else
            if dr!.getFieldAsString("EMPL_ID").length() <> 6 then
                vecErrors!.addItem("EMPL_ID value incorrect!")
            endif
        endif

        rem Place other contraints here...

        methodret vecErrors!

    methodend


    rem /**
    rem  * Remove an empoyee.
    rem  * @see    #validateRemove(DataRow dr!)
    rem  * @param  DataRow dr! DataRow to be removed.
    rem  * @throws an exception if the employee does not exists.
    rem  */
    method public void remove(DataRow dr!)

        vecErrors! = #validateRemove(dr!)
        if vecErrors!.size() then
            it! = vecErrors!.iterator()
            while it!.hasNext()
                errormsg$ = errormsg$ + it!.next() + $0a$
            wend
            errormsg$ = errormsg$(1,len(errormsg$)-1)
            throw errormsg$,999
        endif

        #jbc!.remove(dr!)

    methodend

classend


